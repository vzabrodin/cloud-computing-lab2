//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnitType", Namespace="http://schemas.datacontract.org/2004/07/CloudComputing.Lab2.UnitsConverter.Model")]
    public enum UnitType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Length = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Weight = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UnitsConverterReference.IUnitsConverter")]
    public interface IUnitsConverter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/GetSupportedTypes", ReplyAction="http://tempuri.org/IUnitsConverter/GetSupportedTypesResponse")]
        CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType[] GetSupportedTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/GetSupportedTypes", ReplyAction="http://tempuri.org/IUnitsConverter/GetSupportedTypesResponse")]
        System.Threading.Tasks.Task<CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType[]> GetSupportedTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/GetSupportedUnits", ReplyAction="http://tempuri.org/IUnitsConverter/GetSupportedUnitsResponse")]
        System.Collections.Generic.Dictionary<CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType, string[]> GetSupportedUnits();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/GetSupportedUnits", ReplyAction="http://tempuri.org/IUnitsConverter/GetSupportedUnitsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType, string[]>> GetSupportedUnitsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/GetSupportedUnitsByType", ReplyAction="http://tempuri.org/IUnitsConverter/GetSupportedUnitsByTypeResponse")]
        string[] GetSupportedUnitsByType(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/GetSupportedUnitsByType", ReplyAction="http://tempuri.org/IUnitsConverter/GetSupportedUnitsByTypeResponse")]
        System.Threading.Tasks.Task<string[]> GetSupportedUnitsByTypeAsync(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/IsUnitCodeSupported", ReplyAction="http://tempuri.org/IUnitsConverter/IsUnitCodeSupportedResponse")]
        bool IsUnitCodeSupported(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/IsUnitCodeSupported", ReplyAction="http://tempuri.org/IUnitsConverter/IsUnitCodeSupportedResponse")]
        System.Threading.Tasks.Task<bool> IsUnitCodeSupportedAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/IsUnitTypeSupported", ReplyAction="http://tempuri.org/IUnitsConverter/IsUnitTypeSupportedResponse")]
        bool IsUnitTypeSupported(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/IsUnitTypeSupported", ReplyAction="http://tempuri.org/IUnitsConverter/IsUnitTypeSupportedResponse")]
        System.Threading.Tasks.Task<bool> IsUnitTypeSupportedAsync(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/Convert", ReplyAction="http://tempuri.org/IUnitsConverter/ConvertResponse")]
        double Convert(string from, string to, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUnitsConverter/Convert", ReplyAction="http://tempuri.org/IUnitsConverter/ConvertResponse")]
        System.Threading.Tasks.Task<double> ConvertAsync(string from, string to, double value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUnitsConverterChannel : CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.IUnitsConverter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UnitsConverterClient : System.ServiceModel.ClientBase<CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.IUnitsConverter>, CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.IUnitsConverter {
        
        public UnitsConverterClient() {
        }
        
        public UnitsConverterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UnitsConverterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitsConverterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UnitsConverterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType[] GetSupportedTypes() {
            return base.Channel.GetSupportedTypes();
        }
        
        public System.Threading.Tasks.Task<CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType[]> GetSupportedTypesAsync() {
            return base.Channel.GetSupportedTypesAsync();
        }
        
        public System.Collections.Generic.Dictionary<CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType, string[]> GetSupportedUnits() {
            return base.Channel.GetSupportedUnits();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType, string[]>> GetSupportedUnitsAsync() {
            return base.Channel.GetSupportedUnitsAsync();
        }
        
        public string[] GetSupportedUnitsByType(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type) {
            return base.Channel.GetSupportedUnitsByType(type);
        }
        
        public System.Threading.Tasks.Task<string[]> GetSupportedUnitsByTypeAsync(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type) {
            return base.Channel.GetSupportedUnitsByTypeAsync(type);
        }
        
        public bool IsUnitCodeSupported(string code) {
            return base.Channel.IsUnitCodeSupported(code);
        }
        
        public System.Threading.Tasks.Task<bool> IsUnitCodeSupportedAsync(string code) {
            return base.Channel.IsUnitCodeSupportedAsync(code);
        }
        
        public bool IsUnitTypeSupported(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type) {
            return base.Channel.IsUnitTypeSupported(type);
        }
        
        public System.Threading.Tasks.Task<bool> IsUnitTypeSupportedAsync(CloudComputing.Lab2.UnitsConverter.Client.UnitsConverterReference.UnitType type) {
            return base.Channel.IsUnitTypeSupportedAsync(type);
        }
        
        public double Convert(string from, string to, double value) {
            return base.Channel.Convert(from, to, value);
        }
        
        public System.Threading.Tasks.Task<double> ConvertAsync(string from, string to, double value) {
            return base.Channel.ConvertAsync(from, to, value);
        }
    }
}
