//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudComputing.Lab2.CryptoCurrency.Client.CryptoCurrencyServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CryptoCurrencyServiceReference.ICryptoCurrency")]
    public interface ICryptoCurrency {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoCurrency/Convert", ReplyAction="http://tempuri.org/ICryptoCurrency/ConvertResponse")]
        decimal Convert(string currencyCodeFrom, string currencyCodeTo, decimal value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICryptoCurrency/Convert", ReplyAction="http://tempuri.org/ICryptoCurrency/ConvertResponse")]
        System.Threading.Tasks.Task<decimal> ConvertAsync(string currencyCodeFrom, string currencyCodeTo, decimal value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICryptoCurrencyChannel : CloudComputing.Lab2.CryptoCurrency.Client.CryptoCurrencyServiceReference.ICryptoCurrency, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CryptoCurrencyClient : System.ServiceModel.ClientBase<CloudComputing.Lab2.CryptoCurrency.Client.CryptoCurrencyServiceReference.ICryptoCurrency>, CloudComputing.Lab2.CryptoCurrency.Client.CryptoCurrencyServiceReference.ICryptoCurrency {
        
        public CryptoCurrencyClient() {
        }
        
        public CryptoCurrencyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CryptoCurrencyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoCurrencyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CryptoCurrencyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal Convert(string currencyCodeFrom, string currencyCodeTo, decimal value) {
            return base.Channel.Convert(currencyCodeFrom, currencyCodeTo, value);
        }
        
        public System.Threading.Tasks.Task<decimal> ConvertAsync(string currencyCodeFrom, string currencyCodeTo, decimal value) {
            return base.Channel.ConvertAsync(currencyCodeFrom, currencyCodeTo, value);
        }
    }
}
